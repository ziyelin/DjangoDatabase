from django.db import models
from django.contrib.auth.models import User
from datetime import datetime

QUIZ_DEFAULT_ID = 1
QUESTION_DEFAULT_ORDER= 1
ATTEMPT_DEFAULT_ID = 1
PERSON_DEFAULT_USERNAME = 'zlin1993'


class Quiz(models.Model):     
    title=models.CharField(
			   max_length=60,
			   default="title of the quiz",
			   blank=True
			   )
						  
    description=models.TextField(
				 default="a description of the quiz",
				 blank=True
				 )
							
    question_total_number=models.IntegerField(default=0)
      
    def get_default_id(self):
        return QUIZ_DEFAULT_ID      

    def __str__(self):
        return self.title
		
		
class Question(models.Model):     
    orderinquiz=models.IntegerField(default=0)
	
    text=models.TextField(
			  blank=True,
			  default="a description of the question",
			  )
							 
    quiz=models.ForeignKey(
			   Quiz,
			   default=QUIZ_DEFAULT_ID,
			   on_delete=models.CASCADE,
			   )		       
			     	 
    def get_default_order(self):
        return QUESTION_DEFAULT_ORDER      
        
    def __str__(self):
        return self.text
		                

class Answer(models.Model):    
    text=models.TextField(
			  blank=True,
			  default="a description of the answer"
			  )
							 
    score=models.DecimalField(
			      max_digits=2, 
			      decimal_places=1,
			      default=1.0
			      )

    question=models.ForeignKey(
			       Question,
			       default=QUESTION_DEFAULT_ORDER,   
			       on_delete=models.CASCADE,
			       blank=True
			       )
	
    def __str__(self):
        return self.text
							 
                                 
class Person(models.Model):    
    username = models.CharField(max_length=40, unique=True)

    email = models.EmailField(max_length=100)

    password = models.CharField(max_length=100)

    def get_default_username(self):
        return PERSON_DEFAULT_USERNAME
		
		
class Attempt(models.Model):     
    answer=models.ManyToManyField(Answer)

   
    user = models.ForeignKey(
                             User,
                             on_delete=models.SET_NULL,
                             null = True,
                             blank = True
                            )
    quiz = models.ForeignKey(
                            Quiz,
                            on_delete=models.SET_NULL,
                            null=True,
                            blank=True
                             )
    total_score=models.DecimalField(
				    default=0.0,
				    max_digits=5,
				    decimal_places=2
				    )	
    finish_status = models.BooleanField(
				default = False
				)
    last_modified = models.DateTimeField(
		                        default=datetime.now,
					blank=True
					)				   

    def get_default_id(self):
    	return ATTEMPT_DEFAULT_ID       
    
    def __str__(self):
        funnystring = self.quiz.title+' ' +self.user.username
        return  funnystring
			
    	
    	                    
class AnswerAttempt(models.Model):
    answer=models.ForeignKey(
			     Answer,
			     on_delete=models.CASCADE
			     )
  
    attempt=models.ForeignKey( 
			      Attempt,
			      on_delete=models.CASCADE
			      ) 
     
    def __str__(self):
        return self.attempt
		                                                                          
class QuizAttempt(models.Model):
    quiz=models.ForeignKey(
                          Quiz,
                          on_delete=models.CASCADE
                          )
    attempt=models.ForeignKey(
                             Attempt,
                             on_delete=models.CASCADE
                             )
    score=models.DecimalField(
                            default=0.0,
                            max_digits=5,
                            decimal_places=2
                            )
 
 
 
class QuizQuestionAnswer(models.Model):
    quiz = models.CharField(
                           max_length=60,
                           default="title of the quiz",
                           blank=True
                           )
    question = models.TextField(
                          blank=True,
                          default="a description of the question",
                          )
    answer = models.TextField(
                          blank=True,
                          default="a description of the answer"
                          )

    score = models.DecimalField(
                            default=0.0,
                            max_digits=5,
                            decimal_places=2
                            )

                                            
